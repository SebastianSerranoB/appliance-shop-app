package com.appliance_shop_app.sales_service.controller;

import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/sales")
public class SaleController {

    //autowired
    //saleService interface


    //findOne


    //getAll

    //cancelOne

    //CompleteOne

    //between 2 dates, top 10 sales, product most sold, highest price sale

    /*
            Obtener una venta por ID
            ðŸ“Œ GET /sales/{saleId}
            Devuelve una venta especÃ­fica.

            Obtener todas las ventas
            ðŸ“Œ GET /sales
            Devuelve la lista de todas las ventas registradas.

            Completar una venta
            ðŸ“Œ POST /sales/complete
            Recibe el cartId, mÃ©thod de pago, datos del consumidor y verifica que el carrito estÃ¡ en estado CHECKED_OUT. Si todo estÃ¡ bien, crea la venta.
            DTOs: El sales-service deberÃ­a recibir un SaleRequestDTO en el endpoint de completar la venta, que incluya el cartId, el mÃ©todo de pago y datos del consumidor.

            Cancelar una venta
            ðŸ“Œ PUT /sales/{saleId}/cancel
            Cambia el estado de la venta a CANCELED.

            Obtener ventas en un rango de fechas
            ðŸ“Œ GET /sales?startDate={YYYY-MM-DD}&endDate={YYYY-MM-DD}
            Devuelve todas las ventas realizadas en el rango de fechas.

            Obtener las 10 ventas mÃ¡s caras
            ðŸ“Œ GET /sales/top10
            Retorna las 10 ventas de mayor valor.

            Obtener el producto mÃ¡s vendido
            ðŸ“Œ GET /sales/top-product
            Devuelve el producto mÃ¡s vendido segÃºn las ventas registradas.

            Obtener la venta de mayor precio
            ðŸ“Œ GET /sales/highest-price
            Devuelve la venta con el precio mÃ¡s alto.

            ComunicaciÃ³n con cart-service: Al completar una venta, el sales-service deberÃ­a hacer una llamada a cart-service vÃ­a Feign para obtener los detalles del carrito y verificar su estado.

Estados de venta: Manejar estados como PENDING, COMPLETED y CANCELED.

Manejo de errores: Si el carrito no estÃ¡ en estado CHECKED_OUT, devolver un 400 Bad Request.

Proceso de completar la venta
El usuario envÃ­a un POST /sales/complete con el cartId, mÃ©todo de pago y datos del cliente.

sales-service llama a cart-service (GET /cart/findOne/{cartId}) para obtener los detalles del carrito.

Si el carrito estÃ¡ en estado CHECKED_OUT, se crea una nueva Sale con estado COMPLETED.

Se hace una llamada a cart-service para cambiar el estado del carrito a COMPLETED (PUT /cart/{cartId}/complete).

Se devuelve una respuesta con los datos de la venta.

    */




}
